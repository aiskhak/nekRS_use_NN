#define INTP_NMAX 110000
#define LPART INTP_NMAX /* max number of particles per MPI rank */
c-----------------------------------------------------------------------
c  nek5000 user-file template
c
c  user specified routines:
c     - uservp  : variable properties
c     - userf   : local acceleration term for fluid
c     - userq   : local source term for scalars
c     - userbc  : boundary conditions
c     - useric  : initial conditions
c     - userchk : general purpose routine for checking errors etc.
c     - userqtl : thermal divergence for lowMach number flows 
c     - usrdat  : modify element vertices 
c     - usrdat2 : modify mesh coordinates
c     - usrdat3 : general purpose routine for initialization
c     
c-----------------------------------------------------------------------
   
c-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,eg) ! set variable properties

      implicit none

      integer ix,iy,iz,eg
     
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      udiff  = 0.0
      utrans = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userf(ix,iy,iz,eg) ! set acceleration term

      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      
      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,eg) ! set source term

      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      qvol = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc(ix,iy,iz,iside,eg) ! set up boundary conditions

      implicit none
             
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
	 
      integer ix,iy,iz,iside,eg

      ux = 0.0
      uy = 0.0
      uz = 0.0
      temp = 0.0      
 
      return
      end
c-----------------------------------------------------------------------
      subroutine useric(ix,iy,iz,eg) ! set up initial conditions

      implicit none

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
	  
      integer ix,iy,iz,eg

      !     Quick P-independent randomizer
      !      big  = 1.e3*eg + 1.e2*ix + 1.e1*iy + 1.e0*iz
      !      rand = sin(big)
      !      ux   = .5*rand*rand
      !      uy   = 1.*rand*rand*rand
      !      uz   = 3.0 + 1.0*rand
      !      temp = 0.0

      !real Re_tau, C, k, yp, rei_fac
      !real eps, kx, kz, alpha, beta, pi1

      !Re_tau = 500.0
      !C      = 5.17
      !k      = 0.41
      !pi1 = 4.0*atan(1.0) ! gives 3.14159265 rad

      !if ((y+0.25).le.0.25) then
      !   yp = (y+0.25)*Re_tau/0.25
      !else
      !   yp = (0.5-(y+0.25))*Re_tau/0.25
      !endif

      ! Reichardt function
      !uz  = 1.0/k*log(1.0+k*yp) +
      !&(C -(1.0/k)*log(k))*(1.0-exp(-yp/11.0)-yp/11.0*exp(-yp/3.0))
      !uz = uz * Re_tau*param(2)      

      !eps = 5.0e-2
      !kz = 219.634
      !kx = 7.5
      !alpha = kz*2.0*pi1/60.0
      !beta =  kx*2.0*pi1/(0.5*pi1)

      ! add perturbation to trigger turbulence
      !uz  = uz  + eps*beta  * sin(alpha*(z))*cos(beta*(x+0.25*pi))
      !uy  =       eps       * sin(alpha*(z))*sin(beta*(x+0.25*pi))
      !ux  =      -eps*alpha * cos(alpha*(z))*sin(beta*(x+0.25*pi))
      ux = 0.0
      uy = 0.0
      uz = 0.0
      temp = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk()

      implicit none

      include 'SIZE'
      include 'TOTAL'
      
      ! inputs for NNs - accessed as pointers in .udf
      COMMON /NRSSCPTR/ nrs_scptr(7)
      integer*8 nrs_scptr
      COMMON /INPUTS/ i1(lx1,ly1,lz1,lelv),
     &                i2(lx1,ly1,lz1,lelv), 
     &              dtdy(lx1,ly1,lz1,lelv),
     &              dtdz(lx1,ly1,lz1,lelv),
     &                yw(lx1,ly1,lz1,lelv),
     &                Re(lx1,ly1,lz1,lelv),
     &            z_mult(lx1,ly1,lz1,lelv)
      real i1, i2, dtdy, dtdz, yw, Re, z_mult
	 
      ! derivatives
      real dwdx(lx1,ly1,lz1,lelv),
     &     dwdy(lx1,ly1,lz1,lelv),
     &     dwdz(lx1,ly1,lz1,lelv),
     &     dtdx(lx1,ly1,lz1,lelv)

      ! number of actual points per MPI rank
      integer n

      ! calculate derivatives
      call gradm1(dwdx, dwdy, dwdz, vz)
      call gradm1(dtdx, dtdy, dtdz, t)
	  
      ! integrate derivatives for smoothing
      n = nx1*ny1*nz1*nelv
      call  col2(dwdy, bm1,    n)
      call dssum(dwdy, nx1,    ny1, nz1)
      call  col2(dwdy, bintm1, n)
      call  col2(dtdy, bm1,    n)
      call dssum(dtdy, nx1,    ny1, nz1)
      call  col2(dtdy, bintm1, n)
      call  col2(dtdz, bm1,    n)
      call dssum(dtdz, nx1,    ny1, nz1)
      call  col2(dtdz, bintm1, n)
  
      ! calculate invariants 
      i1 = 0.5*dwdy*dwdy
      i2 = -i1

      ! calculate distance to wall
      yw = (0.25 - abs(ym1)) / 0.25

      ! Reynolds number
      Re = 5.e3 / 1.e4
	  
	  ! zero multiplier
      z_mult = 1.0
      where (zm1 < 5.0)
	      z_mult = 0.0
      endwhere
	  
      ! get address
      nrs_scptr(1) = loc(i1)
      nrs_scptr(2) = loc(i2)
      nrs_scptr(3) = loc(dtdy)
      nrs_scptr(4) = loc(dtdz)
      nrs_scptr(5) = loc(yw)
      nrs_scptr(6) = loc(Re)
      nrs_scptr(7) = loc(z_mult)	  

      ! print size of the arrays
      if (istep == 0) then
          print *, "max points for core", lx1, ly1, lz1, lelv
          print *, "act points for core", nx1, ny1, nz1, nelv
      endif
	  
      return
      end
c-----------------------------------------------------------------------
      subroutine userqtl ! Set thermal divergence

      call userqtl_scig 

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat()   ! This routine to modify element vertices

c      implicit none

      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2()  ! This routine to modify mesh coordinates

c      implicit none

      include 'SIZE'
      include 'TOTAL'
 
      integer iel, ifc, id_face
      integer i, e, f, n
      real dh, geo_sca

      n=lx1*ly1*lz1*nelt

      do iel=1,nelt
      do ifc=1,2*ndim

         boundaryID(ifc,iel) =0
         if (cbc(ifc,iel,1) .eq. 'v  ') then
            boundaryID(ifc,iel) = 1
         end if
         if (cbc(ifc,iel,1) .eq. 'O  ') then
            boundaryID(ifc,iel) = 2
         end if
         if (cbc(ifc,iel,1) .eq. 'W  ') then
            boundaryID(ifc,iel) = 3
         end if

      end do
      end do


      do iel=1,nelt
      do ifc=1,2*ndim

         boundaryIDt(ifc,iel) =0
         if (cbc(ifc,iel,2) .eq. 't  ') then
            boundaryIDt(ifc,iel) = 1
         end if
         if (cbc(ifc,iel,2) .eq. 'I  ') then
            boundaryIDt(ifc,iel) = 2
         end if
         if (cbc(ifc,iel,2) .eq. 'f  ') then
            boundaryIDt(ifc,iel) = 3
         end if

      enddo
      enddo
      
  
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3()

c      implicit none

      include 'SIZE'
      include 'TOTAL'

      return
      end
